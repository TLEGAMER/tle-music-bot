import discord
import os
from discord.ext import commands
from discord import app_commands
import yt_dlp as youtube_dl
import asyncio

intents = discord.Intents.default()
intents.message_content = True  # ‡∏õ‡∏¥‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ
intents.voice_states = True

bot = commands.Bot(command_prefix="!", intents=intents)

music_queues = {}
loop_status = {}

ytdl_format_options = {
    'format': 'bestaudio/best',
    'quiet': True,
    'no_warnings': True,
    'ignoreerrors': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0'
}

ffmpeg_options = {
    'options': '-vn'
}

ytdl = youtube_dl.YoutubeDL(ytdl_format_options)


class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)
        self.data = data
        self.title = data.get('title')
        self.url = data.get('url')

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=False):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))

        if not data:
            raise ValueError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å URL ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ")

        if 'entries' in data:
            if not data['entries']:
                raise ValueError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            data = data['entries'][0]

        if stream:
            filename = data['url']
        else:
            filename = ytdl.prepare_filename(data)

        return cls(discord.FFmpegPCMAudio(filename, **ffmpeg_options), data=data)




def after_error_callback(future):
    try:
        future.result()
    except Exception as e:
        print(f"[ERROR in after callback] {e}")


async def play_next(guild_id):
    queue = music_queues.get(guild_id)
    if not queue or len(queue) == 0:
        voice_client = discord.utils.get(bot.voice_clients, guild__id=guild_id)
        if voice_client and voice_client.is_connected():
            await voice_client.disconnect()
        music_queues[guild_id] = []
        loop_status[guild_id] = False
        return

    voice_client = discord.utils.get(bot.voice_clients, guild__id=guild_id)
    if not voice_client or not voice_client.is_connected():
        return

    try:
        voice_client.play(
            queue[0]["source"],
            after=lambda e: asyncio.run_coroutine_threadsafe(after_song(guild_id), bot.loop).add_done_callback(after_error_callback)
        )
    except Exception as e:
        print(f"[ERROR] play_next: {e}")
        music_queues[guild_id].pop(0)
        await play_next(guild_id)


async def after_song(guild_id):
    current_loop = loop_status.get(guild_id, False)
    queue = music_queues.get(guild_id)
    print(f"[DEBUG] after_song triggered | loop={current_loop}, queue length={len(queue) if queue else 0}")

    if not queue or len(queue) == 0:
        return

    if current_loop:
        voice_client = discord.utils.get(bot.voice_clients, guild__id=guild_id)
        if voice_client and voice_client.is_connected():
            try:
                voice_client.play(
                    queue[0]["source"],
                    after=lambda e: asyncio.run_coroutine_threadsafe(after_song(guild_id), bot.loop).add_done_callback(after_error_callback)
                )
                channel = queue[0]["channel"]
                await channel.send(f"üîÅ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏ã‡πâ‡∏≥: **{queue[0]['source'].title}**")
            except Exception as e:
                print(f"[ERROR] loop play: {e}")
    else:
        music_queues[guild_id].pop(0)

        if len(music_queues[guild_id]) > 0:
            next_song = music_queues[guild_id][0]
            voice_client = discord.utils.get(bot.voice_clients, guild__id=guild_id)
            if voice_client and voice_client.is_connected():
                try:
                    voice_client.play(
                        next_song["source"],
                        after=lambda e: asyncio.run_coroutine_threadsafe(after_song(guild_id), bot.loop).add_done_callback(after_error_callback)
                    )
                    await next_song["channel"].send(f"üé∂ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô: **{next_song['source'].title}**")
                except Exception as e:
                    print(f"[ERROR] play next song: {e}")
        else:
            await play_next(guild_id)


@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ Synced {len(synced)} commands")
    except Exception as e:
        print(f"‚ùå Sync failed: {e}")


@bot.tree.command(name="play", description="‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å YouTube ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á")
@app_commands.describe(query="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠ URL YouTube ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô")
async def play(interaction: discord.Interaction, query: str):
    await interaction.response.defer()

    voice_channel = interaction.user.voice.channel if interaction.user.voice else None
    if not voice_channel:
        await interaction.followup.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á")
        return

    guild_id = interaction.guild.id

    voice_client = discord.utils.get(bot.voice_clients, guild__id=guild_id)
    if not voice_client or not voice_client.is_connected():
        voice_client = await voice_channel.connect()
    elif voice_client.channel != voice_channel:
        await voice_client.move_to(voice_channel)

    try:
        source = await YTDLSource.from_url(query, loop=bot.loop, stream=False)
    except Exception as e:
        await interaction.followup.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ: {e}")
        return

    if guild_id not in music_queues:
        music_queues[guild_id] = []
    music_queues[guild_id].append({"source": source, "channel": interaction.channel})

    if not voice_client.is_playing():
        try:
            voice_client.play(
                music_queues[guild_id][0]["source"],
                after=lambda e: asyncio.run_coroutine_threadsafe(after_song(guild_id), bot.loop).add_done_callback(after_error_callback)
            )
            await interaction.followup.send(f"üé∂ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô: **{source.title}**")
        except Exception as e:
            await interaction.followup.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á: {e}")
    else:
        await interaction.followup.send(f"‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß: **{source.title}**")


@bot.tree.command(name="skip", description="‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î loop")
async def skip(interaction: discord.Interaction):
    guild_id = interaction.guild.id
    voice_client = discord.utils.get(bot.voice_clients, guild__id=guild_id)
    if not voice_client or not voice_client.is_connected():
        await interaction.response.send_message("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
        return  

    loop_status[guild_id] = False
    if voice_client.is_playing():
        voice_client.stop()

    await interaction.response.send_message("‚è≠Ô∏è ‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß")


@bot.tree.command(name="stop", description="‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
async def stop(interaction: discord.Interaction):
    guild_id = interaction.guild.id
    voice_client = discord.utils.get(bot.voice_clients, guild__id=guild_id)
    if not voice_client or not voice_client.is_connected():
        await interaction.response.send_message("‚ùå ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á")
        return

    music_queues[guild_id] = []
    loop_status[guild_id] = False

    if voice_client.is_playing():
        voice_client.stop()
    await voice_client.disconnect()

    await interaction.response.send_message("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß")


@bot.tree.command(name="loop", description="‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ã‡πâ‡∏≥ (toggle)")
async def loop(interaction: discord.Interaction):
    guild_id = interaction.guild.id
    current = loop_status.get(guild_id, False)
    loop_status[guild_id] = not current
    status_text = "‡πÄ‡∏õ‡∏¥‡∏î" if loop_status[guild_id] else "‡∏õ‡∏¥‡∏î"
    await interaction.response.send_message(f"üîÅ loop ‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å: {status_text}")


@bot.tree.command(name="queue", description="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡πÄ‡∏•‡πà‡∏ô")
async def queue(interaction: discord.Interaction):
    guild_id = interaction.guild.id
    queue = music_queues.get(guild_id, [])
    if not queue:
        await interaction.response.send_message("üìÉ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß")
        return

    msg = "üìÉ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß:\n"
    for i, item in enumerate(queue, 1):
        msg += f"{i}. {item['source'].title}\n"

    await interaction.response.send_message(msg)


@bot.tree.command(name="help", description="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó")
async def help_command(interaction: discord.Interaction):
    help_text = (
        "üìñ **‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÄ‡∏û‡∏•‡∏á:**\n\n"
        "‚ñ∂Ô∏è `/play <‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠ URL>` - ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å YouTube\n"
        "‚è≠Ô∏è `/skip` - ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î loop\n"
        "‚èπÔ∏è `/stop` - ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á\n"
        "üîÅ `/loop` - ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ã‡πâ‡∏≥ (toggle)\n"
        "üìÉ `/queue` - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡πÄ‡∏•‡πà‡∏ô\n"
        "‚ÑπÔ∏è `/help` - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ô‡∏µ‡πâ"
    )
    await interaction.response.send_message(help_text)


# ‡∏≠‡πà‡∏≤‡∏ô TOKEN ‡∏à‡∏≤‡∏Å Environment Variable
TOKEN = os.getenv("DISCORD_BOT_TOKEN")
if not TOKEN:
    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variable: TOKEN")
    exit(1)

bot.run(TOKEN)
